#!/bin/bash

set -e
shopt -s nullglob

declare -r SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"


usage() {
  cat <<EOM
Syntax:

    $SCRIPT_DIR/$SCRIPT_NAME -s <src_dir> -d <snapshot_dir> -c <count> [ -p <prefix> ]

Options:

    -s <src_dir>        The source tree to be snapshotted
    -d <snapshot_dir>   The destination directory under which to create a
                        snapshot
    -c <count>          Maximum number of snapshots to retain
    -p <prefix>         Prefix for the snapshot directory name

Notes:

* This will copy \`<src_dir>\` to \`<snapshot_dir>/<prefix><timesamp>\`. All files
  will be copied using reflinks to minimize disk space usage.
* When it's done copying it will remove old snapshot directories as necessary in
  order to retain no more than \`<count>\` snapshots.
* \`<snapshot_dir>\` must be on the same filesystem as \`<src_dir>\`.
* It will skip over any files/directories inside \`<src_dir>\` that are on a
  different filesystem.
* \`<prefix>\` defaults to \`snapshot_\`.

Example cronjob:

    0 0 * * * $SCRIPT_DIR/$SCRIPT_NAME -s / -d /.snapshots -c 7 > /var/log/reflink-snap.log 2>&1

This example will copy and retain up to a week's worth of daily snapshots under
\`/.snapshots/snapshot_<snapshot_timestamp>\`.
EOM
  exit 1
}

create_snapshot() {
  mkdir -p "$SNAPSHOT_DIR"

  local -ar existing_snapshots=("${SNAPSHOT_DIR}/${PREFIX}"*)

  local snapshot_dir
  for snapshot_dir in "${existing_snapshots[@]}"; do
    if [[ ! -d "$snapshot_dir" ]]; then
      echo "$snapshot_dir is not a valid directory, aborting"
      exit 1
    fi
  done

  local -r new_snapshot_dir="${SNAPSHOT_DIR}/${PREFIX}$(date --iso-8601=seconds)"

  echo "Creating snapshot $new_snapshot_dir"
  mkdir "$new_snapshot_dir"

  # The output redirection below simply swaps stdout and stderr so that we can
  # filter cp's stderr output. After that's filtered we swap stdout and stderr
  # again to restore the original stdout and stderr
  cp -a --reflink=always -x "$SRC_DIR"/* "$new_snapshot_dir/"
  rm -f "$LATEST_SYMLINK"
  ln -s "$(basename "$new_snapshot_dir")" "$LATEST_SYMLINK"
  echo "Done"
}

delete_old_snapshots() {
  local -ar all_snapshots=("${SNAPSHOT_DIR}/${PREFIX}"*)

  local -ir num_to_remove=$((${#all_snapshots[@]} - $COUNT))
  if [[ $num_to_remove -gt 0 ]]; then
    local -a sorted_snapshots
    readarray -td '' sorted_snapshots < <(printf '%s\0' "${all_snapshots[@]}" | sort -z)
    for remove_snapshot in "${sorted_snapshots[@]:0:$num_to_remove}"; do
      rm -rf "$remove_snapshot"
      echo "Removed snapshot $remove_snapshot"
    done
  fi
}


declare -i COUNT=0
declare -i DRY_RUN=0

while getopts c:d:hp:s: arg; do
  case $arg in
    c)
      if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
        echo "$OPTARG is an invalid snapshot count"
        echo ""
        usage
      fi
      if [[ "$OPTARG" -eq 0 ]]; then
        echo "<count> must be greater than 0"
        echo ""
        usage
      fi
      COUNT="$OPTARG"
      ;;
    d)
      SNAPSHOT_DIR="$OPTARG"
      ;;
    p)
      PREFIX="$OPTARG"
      ;;
    s)
      SRC_DIR="$OPTARG"
      ;;
    h)
      usage
      ;;
    \?)
      echo ""
      usage
      ;;
  esac
done

PREFIX="${PREFIX:-snapshot_}"

if [[ $COUNT -eq 0 ||
    -z "$SNAPSHOT_DIR" ||
    -z "$PREFIX" ||
    -z "$SRC_DIR" ]]; then
  usage
fi

declare -r LATEST_SYMLINK="$SNAPSHOT_DIR/latest"


create_snapshot
delete_old_snapshots
