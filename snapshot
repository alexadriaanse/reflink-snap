#!/bin/bash

set -e
shopt -s nullglob

usage() {
  echo "Usage: $0 <src_dir> <snapshot_dir> <count> [ <prefix> ]"
  echo ""
  echo "Example: $0 / /.snapshots 7"
  exit 1
}

if [[ $# -lt 3 || $# -gt 4 ]]; then
  usage
fi

if ! [[ "$3" =~ ^[0-9]+$ ]]; then
  echo "$3 is an invalid snapshot count"
  echo ""
  usage
fi

declare -r SRC_DIR="$1"
declare -r SNAPSHOT_DIR="$2"
declare -ir COUNT="$3"
declare -r PREFIX="${4:-snapshot_}"
declare -r LATEST_SYMLINK="$SNAPSHOT_DIR/latest"

if [[ $COUNT -eq 0 ]]; then
  echo "<count> must be greater than 0"
  echo ""
  usage
fi


# Create snapshots

mkdir -p "$SNAPSHOT_DIR"

declare -ar existing_snapshots=("${SNAPSHOT_DIR}/${PREFIX}"*)

for snapshot_dir in "${existing_snapshots[@]}"; do
  if [[ ! -d "$snapshot_dir" ]]; then
    echo "$snapshot_dir is not a valid directory, aborting"
    exit 1
  fi
done

declare -r new_snapshot_dir="${SNAPSHOT_DIR}/${PREFIX}$(date --iso-8601=seconds)"

echo "Creating snapshot $new_snapshot_dir"
mkdir "$new_snapshot_dir"

# The output redirection below simply swaps stdout and stderr so that we can
# filter cp's stderr output. After that's filtered we swap stdout and stderr
# again to restore the original stdout and stderr
cp -a --reflink=always -x "$SRC_DIR"/* "$new_snapshot_dir/"
rm -f "$LATEST_SYMLINK"
ln -s "$(basename "$new_snapshot_dir")" "$LATEST_SYMLINK"
echo "Done"


# Delete old snapshots

declare -ar all_snapshots=("${SNAPSHOT_DIR}/${PREFIX}"*)

declare -ir num_to_remove=$((${#all_snapshots[@]} - $COUNT))
if [[ $num_to_remove -gt 0 ]]; then
  declare -a sorted_snapshots
  readarray -td '' sorted_snapshots < <(printf '%s\0' "${all_snapshots[@]}" | sort -z)
  for remove_snapshot in "${sorted_snapshots[@]:0:$num_to_remove}"; do
    rm -rf "$remove_snapshot"
    echo "Removed snapshot $remove_snapshot"
  done
fi
